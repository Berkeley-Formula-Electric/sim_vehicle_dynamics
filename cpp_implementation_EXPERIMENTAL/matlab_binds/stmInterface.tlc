%% File    : stmInterface.tlc
%% Abstract:
%%      Inlines the stmInterface
%%

%implements "stmInterface" "C"

%function BlockTypeSetup(block, system) void
    %openfile buffer
        #include "matlab_wrapper.h"
    %closefile buffer
    %<LibCacheFunctionPrototype(buffer)>
%endfunction %% BlockTypeSetup


%% Function: BlockInstanceSetup ====================================================
%% Abstract:
%%      Handles local setup, is required by every instance of this block
%%
%function BlockInstanceSetup(block, system) void
    %<LibDefinePWork(block, "stmInterface", 1)>
%endfunction %% BlockInstanceSetup


%% Function: Start ====================================================
%% Abstract:
%%
%function Start(block,system) Output

    %assign wrapper = LibBlockPWork(stmInterface, "", "", 0)
    %<wrapper> = (Wrapper_stm*)malloc(sizeof(SingleTrackModel)+sizeof(VehicleState));

    setParameters_stm(((Wrapper_stm *)%<wrapper>)->stm);

    %assign timestep = LibGetClockTickStepSize(0)

    ((Wrapper_stm *)%<wrapper>)->stm->timestep = %<timestep>;
    ((Wrapper_stm *)%<wrapper>)->stm->counter = 0;

%endfunction %% Start



%% Function: Outputs ===========================================================
%% Abstract:
%%      Adds update function call
%%
%function Outputs(block, system) Output

    %assign wrapper     = LibBlockPWork(stmInterface, "", "", 0)
    
    if(((Wrapper_stm *)%<wrapper>)->stm->counter == 0){

        %assign ini_states  = LibBlockInputSignalAddr(5, "", "", 0)

        ((Wrapper_stm *)%<wrapper>)->vehstate->vx_veh_mps                = (%<ini_states>)[0];
        ((Wrapper_stm *)%<wrapper>)->vehstate->vy_veh_mps                = (%<ini_states>)[1];
        ((Wrapper_stm *)%<wrapper>)->vehstate->dpsi_veh                  = (%<ini_states>)[2];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fl.omega_radps  = (%<ini_states>)[3];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fr.omega_radps  = (%<ini_states>)[4];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rl.omega_radps  = (%<ini_states>)[5];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rr.omega_radps  = (%<ini_states>)[6];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fl.kappa        = (%<ini_states>)[7];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fr.kappa        = (%<ini_states>)[8];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rl.kappa        = (%<ini_states>)[9];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rr.kappa        = (%<ini_states>)[10];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fl.alpha        = (%<ini_states>)[11];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fr.alpha        = (%<ini_states>)[12];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rl.alpha        = (%<ini_states>)[13];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rr.alpha        = (%<ini_states>)[14];
        
        //rotation of veh by 90 degrees to align the coordinate systems
        ((Wrapper_stm *)%<wrapper>)->vehstate->psi_ini = 1.57079632679489661923;
        
        //set counter to 1 because initialisation is over 
        ((Wrapper_stm *)%<wrapper>)->stm->counter = 1;
    }else{

        %assign steeringAngle   = LibBlockInputSignalAddr(0, "", "", 0)
        %assign tireDriveTorque = LibBlockInputSignalAddr(1, "", "", 0)
        %assign brakePressure   = LibBlockInputSignalAddr(2, "", "", 0)
        %assign f_ext           = LibBlockInputSignalAddr(3, "", "", 0)
        %assign m_ext           = LibBlockInputSignalAddr(4, "", "", 0)
        %assign ini_states      = LibBlockInputSignalAddr(5, "", "", 0)
        

        %assign vehstate_out        = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign differentialStates  = LibBlockOutputSignalAddr(1, "", "", 0)
    
        int portWidth1 = 4;

        double d_tireDriveTorque[4];
        double d_brakePressure[4];

        for(int i=0; i<portWidth1;i++){
            d_tireDriveTorque[i] = (%<tireDriveTorque>)[i]; 
            d_brakePressure[i] = (%<brakePressure>)[i];
        }

        //assign values to stm before calling the solver
        ((Wrapper_stm *)%<wrapper>)->vehstate->steeringangle = (%<steeringAngle>)[0];
        
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fl.tireDriveTorque = d_tireDriveTorque[0];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fr.tireDriveTorque = d_tireDriveTorque[1];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rl.tireDriveTorque = d_tireDriveTorque[2];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rr.tireDriveTorque = d_tireDriveTorque[3];

        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fl.brakePressure_Pa = d_brakePressure[0];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_fr.brakePressure_Pa = d_brakePressure[1];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rl.brakePressure_Pa = d_brakePressure[2];
        ((Wrapper_stm *)%<wrapper>)->vehstate->tirestate_rr.brakePressure_Pa = d_brakePressure[3];

        ((Wrapper_stm *)%<wrapper>)->vehstate->fx_ext_N =    (%<f_ext>)[0];
        ((Wrapper_stm *)%<wrapper>)->vehstate->fy_ext_N =    (%<f_ext>)[1];
        ((Wrapper_stm *)%<wrapper>)->vehstate->fz_ext_N =    (%<f_ext>)[2];

        ((Wrapper_stm *)%<wrapper>)->vehstate->mx_ext_Nm =   (%<m_ext>)[0];
        ((Wrapper_stm *)%<wrapper>)->vehstate->my_ext_Nm =   (%<m_ext>)[1];
        ((Wrapper_stm *)%<wrapper>)->vehstate->mz_ext_Nm =   (%<m_ext>)[2];

        //call solver 
        heun(((Wrapper_stm *)%<wrapper>)->stm, ((Wrapper_stm *)%<wrapper>)->vehstate);


        //get results and store it in the output 
        (%<vehstate_out>)[0] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[0];
        (%<vehstate_out>)[1] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[1];
        (%<vehstate_out>)[2] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[2];
        (%<vehstate_out>)[3] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[3];
        (%<vehstate_out>)[4] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[4];
        (%<vehstate_out>)[5] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[5];
        (%<vehstate_out>)[6] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[6];
        (%<vehstate_out>)[7] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[7];
        (%<vehstate_out>)[8] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[8];
        (%<vehstate_out>)[9] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[9];
        (%<vehstate_out>)[10] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[10];
        (%<vehstate_out>)[11] = ((Wrapper_stm *)%<wrapper>)->stm->m_exactMeasurements[11];

        (%<differentialStates>)[0] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[0];
        (%<differentialStates>)[1] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[1];
        (%<differentialStates>)[2] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[2];
        (%<differentialStates>)[3] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[3];
        (%<differentialStates>)[4] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[4];
        (%<differentialStates>)[5] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[5];
        (%<differentialStates>)[6] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[6];
        (%<differentialStates>)[7] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[7];
        (%<differentialStates>)[8] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[8];
        (%<differentialStates>)[9] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[9];
        (%<differentialStates>)[10] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[10];
        (%<differentialStates>)[11] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[11];
        (%<differentialStates>)[12] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[12];
        (%<differentialStates>)[13] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[13];
        (%<differentialStates>)[14] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[14];
        (%<differentialStates>)[15] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[15];
        (%<differentialStates>)[16] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[16];
        (%<differentialStates>)[17] = ((Wrapper_stm *)%<wrapper>)->stm->m_diffS[17];
    }



%endfunction %% Outputs
